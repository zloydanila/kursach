#include "AuthWindow.h"
#include "../database/DatabaseManager.h"
#include <QVBoxLayout>
#include <QHBoxLayout>
#include <QFormLayout>
#include <QMessageBox>
#include <QDebug>
#include <QStackedWidget>
#include <QLineEdit>
#include <QPushButton>
#include <QLabel>
#include <QStatusBar>
#include <QRegularExpression>
#include <QDialog>

using namespace std;

AuthWindow::AuthWindow(QWidget *parent)
    : QMainWindow(parent)
    , stackedWidget(nullptr)
    , regPage(nullptr)
    , regEmail(nullptr)
    , regUser(nullptr)
    , regPass(nullptr)
    , regConfirmPass(nullptr)
    , regBtn(nullptr)
    , toLoginBtn(nullptr)
    , loginPage(nullptr)
    , loginUser(nullptr)
    , loginPass(nullptr)
    , loginBtn(nullptr)
    , toRegBtn(nullptr)
{
    setupUI();
    setupConnections();
    
    setWindowTitle("SoundSpace - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è");
    setFixedSize(400, 500);
    
    this->statusBar()->showMessage("–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞");
}

AuthWindow::~AuthWindow()
{
}

void AuthWindow::showMessage(const QString& title, const QString& text, bool isError)
{
    QDialog dialog(this);
    dialog.setWindowTitle(title);
    dialog.setFixedSize(300, 150);
    
    QVBoxLayout *layout = new QVBoxLayout(&dialog);
    
    QLabel *label = new QLabel(text);
    label->setAlignment(Qt::AlignCenter);
    label->setWordWrap(true);
    layout->addWidget(label);
    
    QPushButton *okButton = new QPushButton("OK");
    connect(okButton, &QPushButton::clicked, &dialog, &QDialog::accept);
    layout->addWidget(okButton);
    
    dialog.exec();
}

void AuthWindow::showSqlInjectionError()
{
    QDialog dialog(this);
    dialog.setWindowTitle("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ SQL –∏–Ω—ä–µ–∫—Ü–∏—è!");
    dialog.setFixedSize(500, 400);
    
    QVBoxLayout *layout = new QVBoxLayout(&dialog);
    
    QLabel *titleLabel = new QLabel("–û–ë–ù–ê–†–£–ñ–ï–ù–ê SQL –ò–ù–™–ï–ö–¶–ò–Ø!");
    titleLabel->setAlignment(Qt::AlignCenter);
    titleLabel->setStyleSheet("QLabel { color: red; font-size: 16px; font-weight: bold; }");
    layout->addWidget(titleLabel);
    
    QLabel *imageLabel = new QLabel();
    QPixmap pixmap("../src/gui/AuthWindow/image.png");
    if (!pixmap.isNull()) {
        imageLabel->setPixmap(pixmap.scaled(200, 200, Qt::KeepAspectRatio));
    } else {
        imageLabel->setText("üö´");
        imageLabel->setStyleSheet("QLabel { font-size: 150px; }");
    }
    imageLabel->setAlignment(Qt::AlignCenter);
    layout->addWidget(imageLabel);
    
    QLabel *textLabel = new QLabel(
        "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞ SQL –∏–Ω—ä–µ–∫—Ü–∏–∏!\n\n"
        "–ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã:\n"
        "‚Ä¢ –ö–∞–≤—ã—á–∫–∏ (' \")\n"
        "‚Ä¢ –¢–æ—á–∫–∞ —Å –∑–∞–ø—è—Ç–æ–π (;)\n"
        "‚Ä¢ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ (--, /* */)\n"
        "‚Ä¢ –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ SQL (SELECT, INSERT, DROP –∏ —Ç.–¥.)\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã."
    );
    textLabel->setAlignment(Qt::AlignCenter);
    textLabel->setWordWrap(true);
    textLabel->setStyleSheet("QLabel { font-size: 12px; color: #333; }");
    layout->addWidget(textLabel);
    
    QPushButton *okButton = new QPushButton("–ü–æ–Ω—è—Ç–Ω–æ");
    okButton->setStyleSheet("QPushButton { background-color: #ff4444; color: white; padding: 8px; border-radius: 4px; }");
    connect(okButton, &QPushButton::clicked, &dialog, &QDialog::accept);
    layout->addWidget(okButton);
    
    dialog.exec();
}

void AuthWindow::setupUI()
{
    stackedWidget = new QStackedWidget(this);
    
    regPage = new QWidget();
    QVBoxLayout *regLayout = new QVBoxLayout(regPage);
    
    QFormLayout *regForm = new QFormLayout();
    
    regEmail = new QLineEdit();
    regEmail->setPlaceholderText("example@gmail.com");
    regForm->addRow("Email:", regEmail);

    regUser = new QLineEdit();
    regUser->setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
    regForm->addRow("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", regUser);
    
    regPass = new QLineEdit();
    regPass->setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å");
    regPass->setEchoMode(QLineEdit::Password);
    regForm->addRow("–ü–∞—Ä–æ–ª—å:", regPass);
    
    regConfirmPass = new QLineEdit();
    regConfirmPass->setPlaceholderText("–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å");
    regConfirmPass->setEchoMode(QLineEdit::Password);
    regForm->addRow("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ:", regConfirmPass);

    regLayout->addLayout(regForm);

    QLabel *reqLabel = new QLabel();
    reqLabel->setText(
        "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:\n"
        "‚Ä¢ Email –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º\n"
        "‚Ä¢ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞\n"  
        "‚Ä¢ –ü–∞—Ä–æ–ª—å: –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤\n"
        "‚Ä¢ –ü–∞—Ä–æ–ª–∏ –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å"
    );
    reqLabel->setStyleSheet("QLabel { color: #666; font-size: 10px; background-color: #f9f9f9; padding: 8px; border-radius: 4px; }");
    reqLabel->setWordWrap(true);
    regLayout->addWidget(reqLabel);

    regBtn = new QPushButton("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è");
    regLayout->addWidget(regBtn);
    
    toLoginBtn = new QPushButton("–£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç? –í–æ–π—Ç–∏");
    toLoginBtn->setStyleSheet("QPushButton { color: blue; text-decoration: underline; border: none; background: transparent; }");
    regLayout->addWidget(toLoginBtn);
    
    regLayout->addStretch();
    
    loginPage = new QWidget();
    QVBoxLayout *loginLayout = new QVBoxLayout(loginPage);
    
    QFormLayout *loginForm = new QFormLayout();
    
    loginUser = new QLineEdit();
    loginUser->setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
    loginForm->addRow("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", loginUser);
    
    loginPass = new QLineEdit();
    loginPass->setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å");
    loginPass->setEchoMode(QLineEdit::Password);
    loginForm->addRow("–ü–∞—Ä–æ–ª—å:", loginPass);
    
    loginLayout->addLayout(loginForm);
    
    loginBtn = new QPushButton("–í–æ–π—Ç–∏");
    loginLayout->addWidget(loginBtn);
    
    toRegBtn = new QPushButton("–ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞? –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è");
    toRegBtn->setStyleSheet("QPushButton { color: blue; text-decoration: underline; border: none; background: transparent; }");
    loginLayout->addWidget(toRegBtn);
    
    loginLayout->addStretch();
    
    stackedWidget->addWidget(loginPage);
    stackedWidget->addWidget(regPage);
    
    setCentralWidget(stackedWidget);
    
    stackedWidget->setCurrentIndex(0);
}

void AuthWindow::setupConnections()
{
    connect(toRegBtn, SIGNAL(clicked()), this, SLOT(switchToRegister()));
    connect(toLoginBtn, SIGNAL(clicked()), this, SLOT(switchToLogin()));
    
    connect(regBtn, SIGNAL(clicked()), this, SLOT(onRegisterClicked()));
    connect(loginBtn, SIGNAL(clicked()), this, SLOT(onLoginClicked()));
}

void AuthWindow::switchToLogin()
{
    stackedWidget->setCurrentIndex(0);
    this->statusBar()->showMessage("–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞");
}

void AuthWindow::switchToRegister()
{
    stackedWidget->setCurrentIndex(1);
    this->statusBar()->showMessage("–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏");
}

bool AuthWindow::isValidEmail(const QString& email)
{
    QRegularExpression emailRegex(R"(^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$)");
    return emailRegex.match(email).hasMatch();
}

bool AuthWindow::isValidUsername(const QString& username)
{
    QRegularExpression userRegex("^[a-zA-Z0-9_]+$");
    return username.length() >= 3 && userRegex.match(username).hasMatch();
}

bool AuthWindow::isStrongPassword(const QString& password)
{
    if (password.length() < 6) return false;
    
    bool hasLetter = false;
    bool hasDigit = false;
    
    for (const QChar& ch : password) {
        if (ch.isLetter()) hasLetter = true;
        if (ch.isDigit()) hasDigit = true;
    }
    
    return hasLetter && hasDigit;
}

bool AuthWindow::hasSqlInjection(const QString& input)
{
    QStringList sqlKeywords = {"SELECT", "INSERT", "UPDATE", "DELETE", "DROP", "CREATE", 
                              "ALTER", "EXEC", "UNION", "WHERE", "FROM", "TABLE"};
    
    QString upperInput = input.toUpper();
    
    for (const QString& keyword : sqlKeywords) {
        if (upperInput.contains(keyword)) {
            return true;
        }
    }
    
    if (input.contains("'") || input.contains("\"") || input.contains(";") || 
        input.contains("--") || input.contains("/*") || input.contains("*/")) {
        return true;
    }
    
    return false;
}

void AuthWindow::onRegisterClicked()
{
    QString email = regEmail->text().trimmed();
    QString username = regUser->text().trimmed();
    QString password = regPass->text();
    QString confirmPass = regConfirmPass->text();

    if (hasSqlInjection(email) || hasSqlInjection(username) || hasSqlInjection(password)) {
        showSqlInjectionError();
        return;
    }
    
    if (email.isEmpty() || username.isEmpty() || password.isEmpty() || confirmPass.isEmpty()) {
        showMessage("–û—à–∏–±–∫–∞", "–í—Å–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã!");
        return;
    }
    
    if (!isValidEmail(email)) {
        showMessage("–û—à–∏–±–∫–∞", 
            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email!\n"
            "–ü—Ä–∏–º–µ—Ä: example@gmail.com");
        regEmail->setFocus();
        regEmail->selectAll();
        return;
    }
    
    if (!isValidUsername(username)) {
        showMessage("–û—à–∏–±–∫–∞",
            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!\n"
            "‚Ä¢ –ú–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞\n"
            "‚Ä¢ –¢–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è");
        regUser->setFocus();
        regUser->selectAll();
        return;
    }
    
    if (password != confirmPass) {
        showMessage("–û—à–∏–±–∫–∞", "–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!");
        regPass->clear();
        regConfirmPass->clear();
        regPass->setFocus();
        return;
    }
    
    if (!isStrongPassword(password)) {
        showMessage("–û—à–∏–±–∫–∞",
            "–°–ª–∞–±—ã–π –ø–∞—Ä–æ–ª—å!\n"
            "‚Ä¢ –ú–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤\n"
            "‚Ä¢ –î–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã");
        regPass->clear();
        regConfirmPass->clear();
        regPass->setFocus();
        return;
    }
    
    QStringList weakPass = {"123456", "password", "qwerty", "111111", "admin123"};
    if (weakPass.contains(password.toLower())) {
        showMessage("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", 
            "–≠—Ç–æ—Ç –ø–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –ø—Ä–æ—Å—Ç–æ–π!\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π –ø–∞—Ä–æ–ª—å.");
        regPass->setFocus();
        return;
    }
    
    if (password.count(password[0]) == password.length()) {
        showMessage("–û—à–∏–±–∫–∞", "–ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤!");
        regPass->clear();
        regConfirmPass->clear();
        regPass->setFocus();
        return;
    }
    
    this->statusBar()->showMessage("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è...");
    
    if (DatabaseManager::instance().registerUser(username, password)) {
        showMessage("–£—Å–ø–µ—Ö", 
            "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n\n"
            "Email: " + email + "\n" +
            "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + username, false);
        this->statusBar()->showMessage("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞");
        
        regEmail->clear();
        regUser->clear();
        regPass->clear();
        regConfirmPass->clear();
        switchToLogin();
    } else {
        showMessage("–û—à–∏–±–∫–∞", 
            "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å!\n"
            "‚Ä¢ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –∑–∞–Ω—è—Ç–æ\n"
            "‚Ä¢ –ü—Ä–æ–±–ª–µ–º–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö");
        this->statusBar()->showMessage("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏");
    }
}

void AuthWindow::onLoginClicked()
{
    QString username = loginUser->text().trimmed();
    QString password = loginPass->text();
    
    if (hasSqlInjection(username) || hasSqlInjection(password)) {
        showSqlInjectionError();
        return;
    }
    
    if (username.isEmpty() || password.isEmpty()) {
        showMessage("–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!");
        return;
    }
    
    if (username.length() > 50 || password.length() > 100) {
        showMessage("–û—à–∏–±–∫–∞", "–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!");
        loginUser->clear();
        loginPass->clear();
        loginUser->setFocus();
        return;
    }
    
    this->statusBar()->showMessage("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...");
    
    if (DatabaseManager::instance().authenticateUser(username, password)) {
        showMessage("–£—Å–ø–µ—Ö", "–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!", false);
        this->statusBar()->showMessage("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞");
        
        qDebug() << "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" << username << "–≤–æ—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É";

        showMainWindow(username);
        
    } else {
        showMessage("–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å!");
        this->statusBar()->showMessage("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏");
        loginPass->clear();
        loginPass->setFocus();
    }
}

void AuthWindow::showMainWindow(const QString& username)
{
    MainWindow *mainWindow = new MainWindow(username);
    mainWindow->show();
    this->hide();
}