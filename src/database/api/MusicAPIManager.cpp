#include "MusicAPIManager.h"
#include "database/DatabaseManager.h"
#include <QDebug>
#include <QSslError>

MusicAPIManager::MusicAPIManager(QObject *parent) 
    : QObject(parent)
    , m_networkManager(new QNetworkAccessManager(this))
    , m_apiKey("5d63cb6ba6780da3f1306e10539e4b01")  
    , m_baseUrl("https://ws.audioscrobbler.com/2.0/")
    , m_currentUserId(-1)
{
    qDebug() << "üéµ MusicAPIManager initialized";
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ç–µ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    m_networkManager->setRedirectPolicy(QNetworkRequest::NoLessSafeRedirectPolicy);
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    connect(m_networkManager, &QNetworkAccessManager::finished,
            this, &MusicAPIManager::handleNetworkResponse);
}

void MusicAPIManager::searchTracks(const QString& query, int userId)
{
    m_currentUserId = userId;
    
    qDebug() << "=== SEARCH TRACKS START ===";
    qDebug() << "Query:" << query;
    qDebug() << "User ID:" << userId;
    
    QUrl url(m_baseUrl);
    QUrlQuery params;
    params.addQueryItem("method", "track.search");
    params.addQueryItem("track", query);
    params.addQueryItem("api_key", m_apiKey);
    params.addQueryItem("format", "json");
    params.addQueryItem("limit", "10");
    
    url.setQuery(params);
    
    qDebug() << "Request URL:" << url.toString();
    
    QNetworkRequest request(url);
    m_networkManager->get(request);
}

void MusicAPIManager::getTopTracks(int userId)
{
    m_currentUserId = userId;
    
    qDebug() << "=== TOP TRACKS START ===";
    qDebug() << "User ID:" << userId;
    
    QUrl url(m_baseUrl);
    QUrlQuery params;
    params.addQueryItem("method", "chart.gettoptracks");
    params.addQueryItem("api_key", m_apiKey);
    params.addQueryItem("format", "json");
    params.addQueryItem("limit", "10");
    
    url.setQuery(params);
    
    qDebug() << "Request URL:" << url.toString();
    
    QNetworkRequest request(url);
    m_networkManager->get(request);
}

void MusicAPIManager::handleNetworkResponse(QNetworkReply *reply)
{
    if (!reply) {
        qDebug() << "‚ùå No reply object!";
        return;
    }
    
    qDebug() << "\n=== NETWORK RESPONSE ===";
    qDebug() << "URL:" << reply->url().toString();
    qDebug() << "Error:" << reply->error();
    qDebug() << "Error string:" << reply->errorString();
    
    // –°—Ä–∞–∑—É —á–∏—Ç–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    QByteArray responseData = reply->readAll();
    qDebug() << "Response size:" << responseData.size() << "bytes";
    
    if (responseData.isEmpty()) {
        qDebug() << "‚ùå Empty response!";
        reply->deleteLater();
        return;
    }
    
    qDebug() << "First 200 chars:" << responseData.left(200);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞ –ø–æ URL
    QString urlString = reply->url().toString();
    
    if (reply->error() == QNetworkReply::NoError) {
        if (urlString.contains("track.search")) {
            processSearchResponse(responseData);
        } else if (urlString.contains("chart.gettoptracks")) {
            processTopTracksResponse(responseData);
        } else {
            qDebug() << "‚ùå Unknown request type";
        }
    } else {
        qDebug() << "‚ùå Network error:" << reply->errorString();
        reply->ignoreSslErrors();
    }
    
    reply->deleteLater();
    qDebug() << "=== RESPONSE COMPLETE ===\n";
}

void MusicAPIManager::processTopTracksResponse(const QByteArray& responseData)
{
    QJsonParseError parseError;
    QJsonDocument doc = QJsonDocument::fromJson(responseData, &parseError);
    
    if (parseError.error != QJsonParseError::NoError) {
        qDebug() << "‚ùå JSON Parse error:" << parseError.errorString();
        qDebug() << "At position:" << parseError.offset;
        qDebug() << "Error context:" << responseData.mid(parseError.offset - 10, 20);
        return;
    }
    
    if (doc.isNull()) {
        qDebug() << "‚ùå Failed to parse JSON for top tracks";
        return;
    }
    
    QJsonObject root = doc.object();
    
    if (root.contains("error")) {
        qDebug() << "‚ùå API Error:" << root["error"].toInt() << "-" << root["message"].toString();
        return;
    }
    
    if (root.contains("tracks")) {
        QJsonObject tracksObj = root["tracks"].toObject();
        
        // –ü—Ä–æ–≤–µ—Ä–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        qDebug() << "Tracks object keys:" << tracksObj.keys();
        
        if (tracksObj.contains("track")) {
            QJsonArray tracks = tracksObj["track"].toArray();
            qDebug() << "‚úÖ Top tracks results:" << tracks.size() << "tracks found";
            
            // –ü–æ–∫–∞–∂–µ–º –ø–µ—Ä–≤—ã–π —Ç—Ä–µ–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            if (!tracks.isEmpty()) {
                QJsonObject firstTrack = tracks.first().toObject();
                qDebug() << "First track name:" << firstTrack["name"].toString();
                qDebug() << "First track artist:" << firstTrack["artist"].toObject()["name"].toString();
            }
            
            processTracksData(tracks);
        } else {
            qDebug() << "‚ùå No 'track' array in tracks object";
        }
    } else {
        qDebug() << "‚ùå Unexpected top tracks response structure";
        qDebug() << "Root keys:" << root.keys();
    }
}

void MusicAPIManager::processSearchResponse(const QByteArray& responseData)
{
    QJsonParseError parseError;
    QJsonDocument doc = QJsonDocument::fromJson(responseData, &parseError);
    
    if (parseError.error != QJsonParseError::NoError) {
        qDebug() << "‚ùå JSON Parse error:" << parseError.errorString();
        qDebug() << "At position:" << parseError.offset;
        return;
    }
    
    if (doc.isNull()) {
        qDebug() << "‚ùå Failed to parse JSON for search";
        return;
    }
    
    QJsonObject root = doc.object();
    
    if (root.contains("error")) {
        qDebug() << "‚ùå API Error:" << root["error"].toInt() << "-" << root["message"].toString();
        return;
    }
    
    if (root.contains("results")) {
        QJsonObject results = root["results"].toObject();
        QJsonObject trackMatches = results["trackmatches"].toObject();
        QJsonArray tracks = trackMatches["track"].toArray();
        
        qDebug() << "‚úÖ Search results:" << tracks.size() << "tracks found";
        
        // –ü–æ–∫–∞–∂–µ–º –ø–µ—Ä–≤—ã–π —Ç—Ä–µ–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if (!tracks.isEmpty()) {
            QJsonObject firstTrack = tracks.first().toObject();
            qDebug() << "First search track:" << firstTrack["name"].toString() << "-" << firstTrack["artist"].toString();
        }
        
        processTracksData(tracks);
    } else {
        qDebug() << "‚ùå Unexpected search response structure";
        qDebug() << "Root keys:" << root.keys();
    }
}

void MusicAPIManager::processTracksData(const QJsonArray& tracksArray)
{
    QVariantList processedTracks;
    
    for (const QJsonValue &trackValue : tracksArray) {
        QJsonObject trackObj = trackValue.toObject();
        
        QVariantMap track;
        
        // –î–ª—è –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –ø–æ–∏—Å–∫–æ–≤—ã—Ö
        if (trackObj.contains("artist") && trackObj["artist"].isObject()) {
            // –≠—Ç–æ –ø–æ–ø—É–ª—è—Ä–Ω—ã–π —Ç—Ä–µ–∫ - artist —ç—Ç–æ –æ–±—ä–µ–∫—Ç
            QJsonObject artistObj = trackObj["artist"].toObject();
            track["artist"] = artistObj["name"].toString();
        } else {
            // –≠—Ç–æ –ø–æ–∏—Å–∫–æ–≤—ã–π —Ç—Ä–µ–∫ - artist —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
            track["artist"] = trackObj.contains("artist") ? 
                             (trackObj["artist"].isString() ? trackObj["artist"].toString() : 
                              "Unknown Artist") : "Unknown Artist";
        }
        
        track["title"] = trackObj["name"].toString();
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        if (trackObj.contains("image")) {
            QJsonArray images = trackObj["image"].toArray();
            if (!images.isEmpty()) {
                // –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤ –º–∞—Å—Å–∏–≤–µ)
                for (int i = images.size() - 1; i >= 0; --i) {
                    QString imageUrl = images[i].toObject()["#text"].toString();
                    if (!imageUrl.isEmpty()) {
                        track["coverUrl"] = imageUrl;
                        break;
                    }
                }
            }
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        if (trackObj.contains("listeners")) {
            track["listeners"] = trackObj["listeners"].toString();
        }
        if (trackObj.contains("playcount")) {
            track["playcount"] = trackObj["playcount"].toString();
        }
        
        processedTracks.append(track);
        
        qDebug() << "üéµ Processing track:" << track["title"].toString() << "-" << track["artist"].toString();
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        DatabaseManager::instance().addTrackFromAPI(
            m_currentUserId,
            track["title"].toString(),
            track["artist"].toString(),
            "", // album
            0,  // duration  
            "", // genre
            track["coverUrl"].toString()
        );
    }
    
    qDebug() << "üéµ Emitting tracksFound signal with" << processedTracks.size() << "tracks";
    emit tracksFound(processedTracks);
}